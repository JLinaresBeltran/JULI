// src/tests/documentGenerationTest.js
const path = require('path');
const fs = require('fs').promises;

// Configuraci√≥n de logging simulado
const mockLogger = {
    logInfo: (...args) => console.log(...args),
    logError: (...args) => console.error(...args)
};

// Mock Services
class MockWhatsAppService {
    async sendTextMessage(to, text) {
        console.log(`üì± Mock WhatsApp mensaje enviado a ${to}:`, text);
        return { messageId: `MSG-${Date.now()}` };
    }

    async markAsRead(messageId) {
        console.log(`üì± Mock WhatsApp mensaje marcado como le√≠do:`, messageId);
        return true;
    }
}

class MockConversationService {
    constructor() {
        this.conversations = new Map();
    }

    async getConversation(whatsappId) {
        if (!this.conversations.has(whatsappId)) {
            const conversation = {
                whatsappId,
                category: 'transporte_aereo',
                metadata: {
                    customerName: "Diana Patricia Mendoza Torres",
                    documentNumber: "51234567",
                    email: "diana.mendoza@email.com",
                    phone: whatsappId,
                    address: "Avenida 19 # 98-76, Bogot√° D.C.",
                    numero_reserva: "XYZABC",
                    numero_vuelo: "AV456",
                    fecha_vuelo: "2024-02-15",
                    ruta: "BOG-MIA",
                    valor_tiquete: "2500000"
                },
                messages: [
                    {
                        type: 'text',
                        text: { body: 'Mi vuelo BOG-MIA fue cancelado sin previo aviso.' }
                    },
                    {
                        type: 'text',
                        text: { body: 'El vuelo era el AV456 para el 15 de febrero, reserva XYZABC.' }
                    },
                    {
                        type: 'text',
                        text: { body: 'Tuve que comprar otro tiquete por $3,500,000.' }
                    }
                ],
                getMessages() {
                    return this.messages.map(m => m.text.body).join('\n');
                }
            };
            this.conversations.set(whatsappId, conversation);
        }
        return this.conversations.get(whatsappId);
    }

    async updateConversationMetadata(whatsappId, metadata) {
        console.log('üìù Mock Conversation metadata actualizada:', metadata);
        const conversation = await this.getConversation(whatsappId);
        conversation.metadata = { ...conversation.metadata, ...metadata };
        return true;
    }
}

class MockLegalAgentSystem {
    async processComplaint(sector, conversation, customerData) {
        console.log('üë®‚Äç‚öñÔ∏è Mock LegalAgent procesando queja:', {
            sector,
            customerName: customerData.name,
            email: customerData.email,
            phone: customerData.phone
        });

        return {
            customerName: customerData.name,
            companyName: "Avianca S.A.",
            reference: "Cancelaci√≥n de Vuelo y Solicitud de Reembolso",
            hechos: [
                "El vuelo AV456 con ruta BOG-MIA programado para el 15 de febrero fue cancelado sin previo aviso.",
                "No se ofrecieron alternativas satisfactorias de viaje.",
                "El usuario incurri√≥ en gastos adicionales por la compra de un nuevo tiquete."
            ],
            peticion: "Solicito el reembolso del valor del tiquete original y la compensaci√≥n por los gastos adicionales incurridos.",
            metadata: {
                category: sector,
                customerEmail: customerData.email,
                customerPhone: customerData.phone
            }
        };
    }
}

class MockDocumentService {
    async generateDocument(serviceType, data, customerData) {
        console.log('üìÑ Mock DocumentService generando documento para:', {
            customerName: customerData.name,
            serviceType,
            documentType: data.reference
        });
        
        const mockDoc = {
            sections: [{
                properties: {},
                children: [
                    { text: "Documento de Reclamaci√≥n", bold: true },
                    { text: `\nPara: ${data.companyName}` },
                    { text: `\nDe: ${customerData.name}` },
                    { text: `\nReferencia: ${data.reference}` },
                    { text: "\n\nHECHOS:" },
                    ...data.hechos.map((hecho, index) => (
                        { text: `\n${index + 1}. ${hecho}` }
                    )),
                    { text: "\n\nPETICI√ìN:" },
                    { text: `\n${data.peticion}` }
                ]
            }]
        };

        return mockDoc;
    }

    async saveDocument(doc, outputPath) {
        console.log('üíæ Mock DocumentService guardando documento en:', outputPath);
        return outputPath;
    }
}

class DocumentRequestHandler {
    constructor(conversationService, whatsappService, legalAgentSystem, documentService) {
        this.conversationService = conversationService;
        this.whatsappService = whatsappService;
        this.legalAgentSystem = legalAgentSystem;
        this.documentService = documentService;
        this.DOCUMENT_TRIGGER = "juli quiero el documento";
    }

    isDocumentRequest(message) {
        if (message.type !== 'text') return false;
        const normalizedText = message.text.body.toLowerCase().trim();
        return normalizedText.includes(this.DOCUMENT_TRIGGER);
    }

    async handleDocumentRequest(message, conversation) {
        try {
            mockLogger.logInfo('Procesando solicitud de documento', {
                whatsappId: message.from,
                category: conversation?.category
            });

            if (!conversation?.category) {
                await this.whatsappService.sendTextMessage(
                    message.from,
                    "Para generar el documento, primero necesito que me cuentes tu caso."
                );
                return { success: false, reason: 'NO_CATEGORY' };
            }

            await this.whatsappService.sendTextMessage(
                message.from,
                "Estoy procesando tu solicitud para generar el documento legal..."
            );

            const customerData = {
                name: conversation.metadata.customerName,
                email: conversation.metadata.email,
                phone: conversation.metadata.phone,
                documentNumber: conversation.metadata.documentNumber,
                address: conversation.metadata.address,
                ...conversation.metadata
            };

            const result = await this.legalAgentSystem.processComplaint(
                conversation.category,
                conversation.getMessages(),
                customerData
            );

            const doc = await this.documentService.generateDocument(
                conversation.category,
                result,
                customerData
            );

            await this.whatsappService.sendTextMessage(
                message.from,
                "¬°Tu documento ha sido generado exitosamente! Te lo enviar√© por correo electr√≥nico."
            );

            await this.conversationService.updateConversationMetadata(
                message.from,
                {
                    documentGenerated: true,
                    documentGeneratedAt: new Date().toISOString(),
                    documentReference: doc.sections[0].children[0].text
                }
            );

            return { 
                success: true, 
                type: 'DOCUMENT_GENERATED', 
                document: doc,
                metadata: {
                    timestamp: new Date().toISOString(),
                    category: conversation.category,
                    customerEmail: conversation.metadata.email
                }
            };

        } catch (error) {
            mockLogger.logError('Error en document request handler', {
                error: error.message,
                whatsappId: message.from
            });

            await this.whatsappService.sendTextMessage(
                message.from,
                "Lo siento, hubo un error procesando tu solicitud. Por favor, intenta nuevamente."
            );

            return { success: false, reason: 'PROCESSING_ERROR', error };
        }
    }
}

async function testDocumentGenerationFlow() {
    try {
        console.log('üöÄ Iniciando prueba de flujo de generaci√≥n de documentos');

        // Configurar directorio de salida
        const outputDir = path.join(__dirname, '../output');
        await fs.mkdir(outputDir, { recursive: true });

        // Instanciar servicios mockeados
        const whatsappService = new MockWhatsAppService();
        const conversationService = new MockConversationService();
        const legalAgentSystem = new MockLegalAgentSystem();
        const documentService = new MockDocumentService();

        // Crear handler de documentos
        const documentHandler = new DocumentRequestHandler(
            conversationService,
            whatsappService,
            legalAgentSystem,
            documentService
        );

        // Simular mensaje de solicitud de documento
        const mockMessage = {
            id: `msg_${Date.now()}`,
            from: '573201234567',
            timestamp: Date.now(),
            type: 'text',
            text: {
                body: 'juli quiero el documento'
            }
        };

        console.log('\nüì® Verificando si es solicitud de documento...');
        const isDocRequest = documentHandler.isDocumentRequest(mockMessage);
        console.log('üîç ¬øEs solicitud de documento?:', isDocRequest);

        // Validar detecci√≥n de solicitud
        if (!isDocRequest) {
            throw new Error('‚ùå Error: No se detect√≥ correctamente la solicitud de documento');
        }

        // Obtener conversaci√≥n
        console.log('\nüîÑ Recuperando conversaci√≥n...');
        const conversation = await conversationService.getConversation(mockMessage.from);
        
        // Validar datos de la conversaci√≥n
        if (!conversation || !conversation.category || !conversation.metadata.customerName) {
            throw new Error('‚ùå Error: Datos de conversaci√≥n incompletos o inv√°lidos');
        }

        console.log('üë• Datos de la conversaci√≥n:', {
            category: conversation.category,
            messageCount: conversation.messages.length,
            customerName: conversation.metadata.customerName
        });

        // Procesar solicitud de documento
        console.log('\nüìù Procesando solicitud de documento...');
        const result = await documentHandler.handleDocumentRequest(mockMessage, conversation);

        // Validar resultado del procesamiento
        if (!result.success || !result.document) {
            throw new Error('‚ùå Error: Fallo en la generaci√≥n del documento');
        }

        // Validar estructura del documento
        const documentContent = result.document.sections[0].children;
        if (!documentContent || documentContent.length === 0) {
            throw new Error('‚ùå Error: Documento generado sin contenido');
        }

        // Guardar resultado para verificaci√≥n
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const resultPath = path.join(outputDir, `document_generation_test_${timestamp}.json`);
        
        const fullResult = {
            ...result,
            testMetadata: {
                timestamp,
                conversationId: mockMessage.from,
                customerData: {
                    name: conversation.metadata.customerName,
                    email: conversation.metadata.email,
                    phone: conversation.metadata.phone
                },
                category: conversation.category,
                validations: {
                    documentGenerated: true,
                    contentValid: documentContent.length > 0,
                    hasMetadata: !!result.metadata
                }
            }
        };
        
        await fs.writeFile(resultPath, JSON.stringify(fullResult, null, 2));

        console.log('\nüìã Resultado del procesamiento:', {
            success: result.success,
            type: result.type,
            documentGenerated: !!result.document,
            contentSections: documentContent.length,
            resultPath
        });

        // Verificar el estado final de la conversaci√≥n
        const finalConversation = await conversationService.getConversation(mockMessage.from);
        
        // Validar estado final
        if (!finalConversation.metadata.documentGenerated || 
            !finalConversation.metadata.documentGeneratedAt ||
            !finalConversation.metadata.documentReference) {
            throw new Error('‚ùå Error: Metadatos de conversaci√≥n no actualizados correctamente');
        }

        console.log('\nüîç Estado final de la conversaci√≥n:', {
            documentGenerated: finalConversation.metadata.documentGenerated,
            documentGeneratedAt: finalConversation.metadata.documentGeneratedAt,
            documentReference: finalConversation.metadata.documentReference
        });

        console.log('\n‚úÖ Todas las validaciones completadas exitosamente');
        return result;

    } catch (error) {
        console.error('\nüí• Error durante la prueba:', error.message);
        throw error;
    }
}

// Ejecutar prueba
console.log('üèÉ Iniciando sistema de pruebas...');
testDocumentGenerationFlow()
    .then(() => console.log('\n‚ú® Prueba completada exitosamente'))
    .catch(error => {
        console.error('\nüí• Error en la prueba:', error);
        process.exit(1);
    });